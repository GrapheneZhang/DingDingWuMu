<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       	   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	       http://www.springframework.org/schema/context
	       http://www.springframework.org/schema/context/spring-context-3.0.xsd
	       http://www.springframework.org/schema/aop
	       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/mvc  
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd" >
           
	<!-- 1 MVC注解驱动:Controller的HandlerMapping相关映射支持 -->  
	<mvc:annotation-driven/>

    <!-- 2 组件扫描 :包括了<context:annotation-config/>(DI注解解析器)中的内容(@Resource@Autowired,etc..)-->
	<context:component-scan base-package="com.dingding.background.controller,com.dingding.background.dao,com.dingding.background.service.impl,com.dingding.test"/>
	<context:component-scan base-package="com.dingding.proscenium.controller,com.dingding.proscenium.dao" />
		     
    <!-- 3 静态资源放行:在web.xml中用另一种方式实现了,此处先注释掉
    <mvc:resources mapping="/commons/**" location="/commons/" />
    <mvc:resources mapping="/style/**" location="/style/" />
    <mvc:resources mapping="/script/**" location="/script/" />
    <mvc:resources mapping="/images/**" location="/images/" />-->
     
     
    <!-- 4 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	 
	<!--5、配置文件上传（ SpringMVC上传文件时，需要配置MultipartResolver处理器 ）-->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="defaultEncoding" value="UTF-8"/>  
	    <!-- 指定所上传文件的总大小不能超过2M。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->  
	    <property name="maxUploadSize" value="2000000"/>  
	</bean>  
      
    <!--6、文件异常配置（ SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException） -->  
 	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
	    <property name="exceptionMappings">  
	        <props>  
	            <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->  
	            <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>  
	        </props>  
	    </property>  
	</bean>  
		    
	 <!--
	 <mvc:interceptors>    5 拦截器 
	  	 <mvc:interceptor>
	  	     <mvc:mapping path="/user/*"/>
	         <bean class="com.dingding.background.interceptor.BGDefaultInterceptor"/>  
	     </mvc:interceptor>    
	 </mvc:interceptors>
	 -->  
	 <!-- 6 总错误处理
	 <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
		 	<value>/error/error</value>
		</property>
		<property name="defaultStatusCode">
		 	<value>500</value>
		</property>	
	    <property name="warnLogCategory">将全局异常记录到日志中 
		 	<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
		</property>	
	 </bean> 
	 -->
</beans>                  